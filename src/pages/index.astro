---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import { getCollection } from "astro:content";
import versionSlug from '../lib/versionSlug';

const blogPosts = await getCollection("blog");
// find latest blog post
const latestPost = blogPosts.sort((a, b) => {
	const aVersion = a.data.zammVersion.split('.').map(Number);
	const bVersion = b.data.zammVersion.split('.').map(Number);
	return aVersion[0] - bVersion[0] || aVersion[1] - bVersion[1] || aVersion[2] - bVersion[2];
})[0];
const { zammVersion: latestVersion } = latestPost.data;
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>
			@font-face {
				font-family: 'Nasalization';
				font-style: normal;
				font-weight: 400;
				src: url('/fonts/private/nasalization-rg.otf') format("opentype");
			}

			@font-face {
				font-family: 'Nasalization';
				font-style: normal;
				font-weight: 700;
				src: url('/fonts/private/nasalization-bd.otf') format("opentype");
			}

			@font-face {
				font-family: 'Nasalization';
				font-style: normal;
				font-weight: 800;
				src: url('/fonts/private/nasalization-hv.otf') format("opentype");
			}

			@font-face {
				font-family: 'Good Timing';
				font-style: italic;
				font-weight: 400;
				src: url('/fonts/private/good_timing_rg_it.otf') format("opentype");
			}

			@font-face {
				font-family: 'Good Timing';
				font-style: normal;
				font-weight: 400;
				src: url('/fonts/private/good_timing_rg.otf') format("opentype");
			}

			@font-face {
				font-family: 'Good Timing';
				font-style: normal;
				font-weight: 700;
				src: url('/fonts/private/good_timing_bd.otf') format("opentype");
			}

			h1 {
				text-align: center;
				font-family: 'Nasalization', Arial, Helvetica, sans-serif;
			}

			p {
				text-align: center;
				font-family: 'Good Timing', Arial, Helvetica, sans-serif;
			}
		</style>
		<script>
			// @ts-nocheck
			!function(t,e){var o,n,p,r;e.__SV||(window.posthog=e,e._i=[],e.init=function(i,s,a){function g(t,e){var o=e.split(".");2==o.length&&(t=t[o[0]],e=o[1]),t[e]=function(){t.push([e].concat(Array.prototype.slice.call(arguments,0)))}}(p=t.createElement("script")).type="text/javascript",p.async=!0,p.src=s.api_host+"/static/array.js",(r=t.getElementsByTagName("script")[0]).parentNode.insertBefore(p,r);var u=e;for(void 0!==a?u=e[a]=[]:a="posthog",u.people=u.people||[],u.toString=function(t){var e="posthog";return"posthog"!==a&&(e+="."+a),t||(e+=" (stub)"),e},u.people.toString=function(){return u.toString(1)+".people (stub)"},o="capture identify alias people.set people.set_once set_config register register_once unregister opt_out_capturing has_opted_out_capturing opt_in_capturing reset isFeatureEnabled onFeatureFlags getFeatureFlag getFeatureFlagPayload reloadFeatureFlags group updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures getActiveMatchingSurveys getSurveys onSessionId".split(" "),n=0;n<o.length;n++)g(u,o[n]);e._i.push([i,s,a])},e.__SV=1)}(document,window.posthog||[]);
			posthog.init('phc_tvj1sCmirrSd5UiBYqfhyVHWn2LLjYddaISKVmEAykt',{api_host:'https://app.posthog.com'})
		</script>
	</head>
	<body>
		<Header />
		<main>
			<h1>ZAMM</h1>
			<p>This is an experimental and still incomplete AI chat tool.</p>
			<p>Download <a href={`/blog/${versionSlug(latestPost)}`}>version {latestVersion}</a>.</p>
		</main>
		<Footer />
	</body>
</html>
